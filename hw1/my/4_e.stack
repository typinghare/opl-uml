# Copyright 2024 James Chan
# ------------------------------------------------------------------------
# Given input m::n::[], where m > 0 and n > 0, required to output i::[], 
# where i is 0 if m is a multiple of n, and 1 otherwise.
# ------------------------------------------------------------------------
# <Examples>
# (1) [28, 7] ->* [0]
# Setup:  [28, 7] -> [28, 28, 7] -> [7, 28, 28] -> [7, 7, 28, 28] ->
#         [28, 7, 7, 28] -> [7, 28, 7, 28]
# DivMul: [7, 28, 7, 28] -> [4, 7, 28] -> [28, 28]
# Add1:   [28, 28] -> [1, 28, 28] -> [29, 28]
# AddOn:  [29, 28] -> [28, 29] -> [28, 28, 29] -> [29, 28, 28] -> 
#         [57, 28] -> [28, 57] -> [28, 28, 57] -> [56, 57] -> [57, 56] 
# Final:  [57, 56] -> [0]
#
# (2) [28, 6] ->* [1]
# Setup:  [28, 6] ->* [6, 28, 6, 28]
# DivMul: [6, 28, 6, 28] -> [4, 6, 28] -> [24, 28]
# Add1:   [24, 28] ->* [25, 28]
# AddOn:  [25, 28] ->* [53, 56] 
# Final:  [53, 56] -> [1]
#
# (3) [4, 8] ->* [1]
# Setup:  [4, 8] ->* [8, 4, 8, 4]
# DivMul: [8, 4, 8, 4] -> [0, 4]
# Add1:   [0, 4] ->* [1, 4]
# AddOn:  [1, 4] ->* [5, 9] 
# Final:  [5, 9] -> [1]
#
# <Code>
# Setup:  dup; swap 2; dup; swap 2; swap 1;
# DivMul: div; mul;
# Add1:   push 1; add;
# AddOn:  swap 1; dup; swap 2; add; swap 1; dup; add; swap 1
# Final:  div
# ------------------------------------------------------------------------
< dup; swap 2; dup; swap 2; swap 1; div; mul; push 1; add; swap 1; dup; swap 2; add; swap 1; dup; add; swap 1; div, 3::2::[]>
# < dup; swap 2; dup; swap 2; swap 1; div; mul; push 1; add; swap 1; dup; swap 2; add; swap 1; dup; add; swap 1; div, 28::6::[]>
# < dup; swap 2; dup; swap 2; swap 1; div; mul; push 1; add; swap 1; dup; swap 2; add; swap 1; dup; add; swap 1; div, 9999999999::9199999999::[]>
#
# [28, 7] -> [7, 28] -> [7, 7, 28] -> [28, 7, 7] -> [28, 28, 7, 7] -> [7, 28, 28, 7] -> [4, 28, 7] -> [28, 4, 7] -> [7, 4, 28] -> [28, 28]
# ->* [0] (minus) -> [0, 0] -> [0]
# ->* [1] (minus) -> [0, 1] -> ([-1, 0, 1] -> [0, 1] -> [1, 1]) -> [1]
# ->* [999] (minus) -> [0, 999] -> ([-1, 0, 999] -> [0, 999] -> [1, 999]) -> ([-1, 1, 999] -> [-1, 999] -> [998] -> [1, 998])
# Time limt exceeded
< swap 1; dup; swap 2; dup; swap 2; div; swap 1; swap 2; mul; push -1; mul; add; push 0; whilene{push -1; mul; add; push 1}; pop, 9999999999::9199999999::[]>
# < swap 1; dup; swap 2; dup; swap 2; div; swap 1; swap 2; mul; push -1; mul; add, 9999999999::9199999999::[]>





